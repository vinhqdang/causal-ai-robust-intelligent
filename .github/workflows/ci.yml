name: ICCP CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Create artifacts directory
      run: mkdir -p artefacts
        
    - name: Run unit tests
      run: |
        pytest tests/test_smoke.py -v --tb=short
        
    - name: Test individual components
      run: |
        # Test CaReF encoder
        cd src/caref && python encoder.py
        
        # Test SCM adapters (skip due to model download)
        # cd src/adapters && python scaffolding.py
        
        # Test CPI module
        cd src/influence_functions && python ops.py
        
        # Test CRB buffer
        cd src/crb && python buffer.py
        
        # Test audit ledger
        cd src/audit && python audit.py
        
        # Test evaluation metrics
        cd src/evaluation && python metrics.py
        
    - name: Code style check (optional)
      run: |
        # Skip for now - would need flake8 or black
        echo "Code style check skipped"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          artefacts/
          *.log
        retention-days: 5

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create conda environment info
      run: |
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "PyTorch version: $(python -c 'import torch; print(torch.__version__)')"
        echo "Transformers version: $(python -c 'import transformers; print(transformers.__version__)')"
        
    - name: Run integration test (minimal)
      run: |
        # Run a minimal version of main with reduced settings
        python -c "
        import os
        import sys
        sys.path.insert(0, os.getcwd())
        
        # Import with mocking to avoid downloading large models
        from unittest.mock import patch, MagicMock
        import torch
        import torch.nn as nn
        
        # Mock the heavy components
        with patch('src.main.GPT2Model') as mock_model, \
             patch('src.main.GPT2Config') as mock_config, \
             patch('src.main.AutoTokenizer') as mock_tokenizer:
            
            # Setup mocks
            mock_config_inst = MagicMock()
            mock_config_inst.n_embd = 64
            mock_config_inst.vocab_size = 1000
            mock_config.from_pretrained.return_value = mock_config_inst
            
            mock_model_inst = nn.Module()
            mock_model_inst.wte = nn.Embedding(1000, 64)
            mock_model.return_value = mock_model_inst
            
            mock_tokenizer_inst = MagicMock()
            mock_tokenizer_inst.pad_token = None
            mock_tokenizer_inst.eos_token = '[EOS]'
            mock_tokenizer.from_pretrained.return_value = mock_tokenizer_inst
            
            # Import and run minimal test
            from src.main import ICCPTrainingConfig, ICCPTrainer
            
            config = ICCPTrainingConfig()
            config.num_epochs = 1
            config.batch_size = 2
            config.enable_audit = False
            
            trainer = ICCPTrainer(config)
            print('Integration test: ICCP trainer initialized successfully')
            
            # Test data generation
            dataloader = trainer._generate_synthetic_data(num_samples=10)
            print(f'Integration test: Generated dataloader with {len(dataloader)} batches')
            
            print('✅ Integration test passed!')
        "

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run basic security checks
      run: |
        # Check for common security issues in Python files
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets (basic patterns)
        if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]+['\"]" src/ || true; then
          echo "⚠️  Potential hardcoded secrets found (review above)"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
        
        # Check for dangerous imports
        if grep -r -E "(eval|exec|__import__|compile)\(" src/ || true; then
          echo "⚠️  Potentially dangerous function calls found (review above)"
        else
          echo "✅ No dangerous function calls found"
        fi
        
        # Check for SQL injection patterns (basic)
        if grep -r -E "\.execute\(.*\+.*\)" src/ || true; then
          echo "⚠️  Potential SQL injection patterns found (review above)"
        else
          echo "✅ No obvious SQL injection patterns found"
        fi
        
        echo "Security scan completed"
